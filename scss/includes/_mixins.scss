@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition; 
    transition:         $transition;
}
// generic transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	  -o-transform: $transforms;
	 -ms-transform: $transforms;
 -webkit-transform: $transforms;
	   transform: $transforms;
}
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
          transform-origin: $origin;
}
@mixin appearance($app){
	-moz-appearance: $app;
	-webkit-appearance: $app;
};
@mixin placeholder { 
	::-webkit-input-placeholder {@content};
	:-moz-placeholder           {@content};
	::-moz-placeholder          {@content};
	:-ms-input-placeholder      {@content};  
  }
  @mixin backface-visibility ($bv) {
	backface-visibility: $bv;
	-webkit-backface-visibility: $bv;
	-moz-backface-visibility: $bv;
	-ms-backface-visibility: $bv;
	-o-backface-visibility: $bv; 
	} 

	
	@function strip-unit($value) {
		@return $value / ($value * 0 + 1);
	}
	
	@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
		$u1: unit($min-vw);
		$u2: unit($max-vw);
		$u3: unit($min-font-size);
		$u4: unit($max-font-size);
	
		@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
			& {
				font-size: $min-font-size;
				@media screen and (min-width: $min-vw) {
					font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
				}
				@media screen and (min-width: $max-vw) {
					font-size: $max-font-size;
				}
			}
		}
	}